import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import json
import serial 


class UGVSubscriber(Node):
    def init(self):
        super().init('ugv_subscriber')
        self.subscription = self.create_subscription(String, 'gesture_topic', self.listener_callback, 10)
        self.serial_port = serial.Serial('/dev/ttyACM0', baudrate=115200)  # поменяй путь если другой
        # self.serial_port = '/dev/ttyACM0'

    def listener_callback(self, msg):
        try:
            data = json.loads(msg.data)
            # self.get_logger().info(f"heard: {data}")
            gesture = data.get('gesture')
            depth = data.get('depth')
            movement = data.get('movement')  # Добавляем проверку movement

        # Если движение "Stop" или рука не обнаружена - останавливаем робота
            if movement == "Stop" or 'hand_detected' in data and not data['hand_detected']:
                command = '{"T":1,"L":0.0,"R":0.0}'  # Полная остановка
            else:
                command = self.create_command(gesture, depth)
            
            self.serial_port.write(command.encode() + b'\n')
            self.get_logger().info(f"Sent to Arduino: {command}")
        except Exception as e:
            self.get_logger().error(f"Error: {e}")


    def create_command(self, gesture, depth):
        if gesture == "Left":
            return '{"T":1,"L":-0.3,"R":0.3}'
        elif gesture == "Right":
            return '{"T":1,"L":0.3,"R":-0.3}'
        elif gesture == "UpRight":
            return '{"T":1,"L":0.5,"R":0.3}'    
        elif gesture == "UpLeft":
            return '{"T":1,"L":0.3,"R":0.5}'
        elif gesture == "UTurn":
            return '{"T":1,"L":-0.5,"R":0.5}'
        else:
            if depth <= 40:
                return '{"T":1,"L":-0.5,"R":-0.5}'
            elif depth >= 61:
                return '{"T":1,"L":0.5,"R":0.5}'
            else:
                return '{"T":1,"L":0.0,"R":0.0}'

def main(args=None):
    rclpy.init(args=args)
    node = UGVSubscriber()
    rclpy.spin(node)
    rclpy.shutdown()